// Generated by CodiumAI
import React from "react";
import "@testing-library/jest-dom";
import { render, screen, fireEvent } from "@testing-library/react";
import { useDispatch, useSelector } from "react-redux";
import { useQuery } from "@apollo/client";
import { Provider } from "react-redux";
import { RouterContext } from "next/dist/shared/lib/router-context";

import Layout from "../../components/Layout";
import { setOpenMenuState } from "../../slices/layoutSlice";
import { store } from "../../store";
import { createMockRouter } from "../../utils";

describe("Render Layout Component", () => {
	// Renders the component with children when the current route is not '/login' or '/nuevacuenta'
	it("should render the component with children when the current route is not '/login' or '/nuevacuenta'", () => {
		// Mock the useRouter hook
		const router = createMockRouter({
			pathname: "/clientes",
		});

		// Render the component
		render(
			<Provider store={store}>
				<RouterContext.Provider value={router}>
					<Layout>
						<h1>Welcome to my website</h1>
						<p>This is the content of my website.</p>
					</Layout>
				</RouterContext.Provider>
			</Provider>
		);

		// Assert that the component with children is rendered
		expect(screen.getByText("Welcome to my website")).toBeInTheDocument();
		expect(
			screen.getByText("This is the content of my website.")
		).toBeInTheDocument();
	});

	// Renders the component with children when the current route is '/login' or '/nuevacuenta'
	it("should render the component with children when the current route is '/login' or '/nuevacuenta'", () => {
		// Mock the useRouter hook
		const router = createMockRouter({
			pathname: "/login",
		});

		// Render the component
		render(
			<Provider store={store}>
				<RouterContext.Provider value={router}>
					<Layout>
						<h1>Welcome to my website</h1>
						<p>This is the content of my website.</p>
					</Layout>
				</RouterContext.Provider>
			</Provider>
		);

		// Assert that the component with children is rendered
		expect(screen.getByText("Welcome to my website")).toBeInTheDocument();
		expect(
			screen.getByText("This is the content of my website.")
		).toBeInTheDocument();
	});
});
